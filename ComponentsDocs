1. Folder Structure

Add a dedicated folder for docs:

src/docs/
  ├─ ComponentsDocs.jsx
  ├─ ButtonExample.jsx
  ├─ CardExample.jsx


---

2. Create a Live Preview Component

In src/docs/LivePreview.jsx:

import { useState } from 'react';

export default function LivePreview({ Component, defaultProps = {} }) {
  const [props, setProps] = useState(defaultProps);

  return (
    <div style={{ marginBottom: '2rem' }}>
      <Component {...props} />
      <pre style={{ background: '#f5f5f5', padding: '1rem', marginTop: '1rem' }}>
        {JSON.stringify(props, null, 2)}
      </pre>
    </div>
  );
}

This will allow interactive prop editing later.


---

3. Example for Button

src/docs/ButtonExample.jsx:

import LivePreview from './LivePreview';
import Button from '../components/buttons/Button';
import { useState } from 'react';

export default function ButtonExample() {
  const defaultProps = { children: 'Click Me', disabled: false };

  return (
    <div>
      <h2>Button Component</h2>
      <LivePreview Component={Button} defaultProps={defaultProps} />

      <label>
        Disabled:
        <input
          type="checkbox"
          onChange={(e) => (defaultProps.disabled = e.target.checked)}
        />
      </label>
    </div>
  );
}

You can extend this so developers can toggle props in real time.


---

4. Example for Card

src/docs/CardExample.jsx:

import LivePreview from './LivePreview';
import Card from '../components/cards/Card';

export default function CardExample() {
  const defaultProps = { children: 'This is a card' };

  return (
    <div>
      <h2>Card Component</h2>
      <LivePreview Component={Card} defaultProps={defaultProps} />
    </div>
  );
}


---

5. ComponentsDocs Page

src/docs/ComponentsDocs.jsx:

import ButtonExample from './ButtonExample';
import CardExample from './CardExample';

export default function ComponentsDocs() {
  return (
    <div style={{ padding: '2rem' }}>
      <h1>Interactive Component Documentation</h1>
      <ButtonExample />
      <CardExample />
      {/* Add more component examples here */}
    </div>
  );
}


---

6. Routing

If using Next.js or React Router:

// Next.js in app/layout.js or pages/_app.js
import ComponentsDocs from '../src/docs/ComponentsDocs';

export default function DocsPage() {
  return <ComponentsDocs />;
}


---

7. Optional Enhancements

Prop Controls: Add form inputs to update props dynamically.

Code Snippets: Use react-syntax-highlighter to display JSX code for each example.

Theme Support: Integrate your light/dark mode toggle to preview components in both modes.

Live Editing: Consider react-live for full JSX editing in the browser.
